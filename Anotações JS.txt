JavaScript

https://developer.mozilla.org/pt-BR/

var precisa de um identificador
pode usar var, let ou const
Ex: var n1 (variavél)
n1 = 5 (= recebe), isso se chama de atribuição
O nome de cada variável se chama identificador

Identificadores:
Podem começar com letra, $ ou _
Não podem começar com números
Podem usar letras ou números
É possível usar acentos e símbolos
Não podem conter espaços
Não podem ser palavras reservadas
-----------------------------------------------------------------------------------
Que tipos de dados são suportados pelo JavaScript?
O JavaScript possui 7 tipos de dados primitivos: String, Number, Boolean, BigInt, Null, Undefined e Symbol. O tipo de dado Object entra na lista como oitavo, embora seja listado como um tipo, um Object é uma estrutura de dados.

Tipos primitivos do JavaScript
JavaScript não diferencia valores numéricos inteiros e reais. Todos são considerados como "number". ao ivés ser inteiros ou reais. (5 18 0.5 -15.9 3.13 10).
"number": tem dois valores internos muito importantes:
infinity
NaN (note and number)

String são cadeias de caracteres, "Google" ou Ex. telefone, tem números, traços.CPF é string, composto pontos, traços e caracteres.
Boolean, true e false, normal como os outros.

null
undefined
object (JavaScript é orientada a objetos)
Tipo inteiro array, que é object
function também é um tipo primitivo no JavaScript
---------------------------------------------------------------------------------

Dicas para escolher nomes de Identificadores:
Maiúsculas e minúsculas fazem diferença. Caixa alta e Caixa baixa, ficam como variáveis diferentes e com valores diferentes.
Tente usar nomes coerentes para as suas variáveis. Ex: Nome da pessoa (var nome), Salário (var sal), Idade(idade).
Evite se tornar um programador alfabeto, ou contador. Usa só letras e números.

Fechar nodeJS .exit
CTRL + L (Limpar tela nodejs)
--------------------------------------------------------------------------
typeof (tipo de) Ex. typeof n, mostra que n é um number.
+ variavel, mostra na tela, junta uma coisa na outra. Tem a função de concatenação. String + String concatena
+ também para adição, tem que ser number + number

O que o operador typeof do JavaScript faz?
O tipo do dado de um operando em formato de string, podendo por exemplo retornar se o valor verificado é uma String, Number, Boolean, Null, Undefined, entre outros.

Exemplo de uso do typeof
const mensagem = "Algum texto aqui";
console.log(typeof mensagem); // output: string

const ano = 2022;
console.log(typeof ano); // output: number
---------------------------------------------------------------------------
O window.prompt retorna uma string, mesmo que seja número ele trata como string
Number.parseInt(n)
Number.parseFloat(n) //ponto flutuante, com vírgula
Number(n) Neste o JavaScript decide conforme os valores recebidos
------------------------------------------------------------------------------
Converter de número para string
String(n) ou n.toString() 
var soma = parseInt(n1) + parseInt(n2)
-----------------------------------------------------------------------------
Exemplo Terminal: nodejs "Concatenação" (Método Antigo)
nome = 'Tercio'
idade = 53
nota = 5.5
'O Aluno ' + nome + ' com a idade de ' + idade + ' anos' + ' teve a nota ' + nota
Resultado: 'O Aluno Tercio com a idade de 53 anos Teve a nota 5.5'
--------------------------------------------------------------------------------
Método novo
Template strings é um literal string que permitem expressões embutidas. $ PlaceHolder
Esse literal é delimitado por acentos graves ` ao invés das tradicionais aspas simples ' ou aspas duplas ".
`O aluno ${nome} com ${idade} anos tirou a nota ${nota}`    // Neste caso usa acento grave 	`flecha em cima do ctrl espaço
`O aluno ${nome} com idade de ${idade} tirou nota ${nota}`
'O aluno Tércio com idade de 53 tirou nota 7'
----------------------------------------------------------------------------------
s.length // quantos caractres a string tem
s.toUpperCase() // tudo para MAISCULAS
s.toLowerCase() //tudo para minusculas
var n1 = 1545.5
n1.toFixed(2) // 2 casas decimais
'1545.50'
n1.toFixed(2).replace('.',',') //Troca ponto por virgula
'1545,50'
n1.toLocaleString('pt-BR',{style: 'currency', currency: 'BRL'})
'R$ 1,545.50'n1.toLocaleString('pt-BR',{style: 'currency', currency: USD'})
'US$ 1,545.50'
---------------------------------------------------------------------------------
Operadores: Precedência
Aritméticos () ** /
Relacionais > <  >=
Lógicos ! && ||

aritméticos: + - * / % ** (% resto da divisão inteira. Ex: 5/2, resto 1) (** Potência quadrado)
1º Parêntesis;
1º Aritméticos () ** / 
2º Expoentes;
3º Multiplicações e Divisões; (da esquerda para a direita)
4º % resto da divisão
5º Somas e Subtrações. (da esquerda para a direita)

atribuição
Auto attribuição var n=3 (auto encremento)
n = n + 4  ou  (n += 4) (recebe ele mesmo) ou (n++)

relacionais
5 == 5 -> true
5 == '5' -> true // Se tiver string ele considerea igual
5 === '5' -> false //Pra isso usa operador de identidade "Operador de igualdade restrita" === (Testa se eles são realmente idênticos) "eles tem o mesmo valor, mas não o mesmo tipo"

!== (Desigual restrito) são de tipos diferentes
---------------------------------------------------------------------------------------
lógicos
! (negação) quer dizer não, not... (Ex: Eu quero uma caneta de qualquer cor "!" menos azul). Ele é tratado como operador unário, isto é, ele só tem um operando.
 ! true ou ! false

&& (conjunção) "e" lógico  (Ex: Eu quero uma caneta azul e uma caneta vermelha "&&"  satisfaz se entregar as duas). Ele é operador binário, tem dois valores lógicos.
true && true => true  - (Eu quero uma caneta azul e uma caneta vermelha "true")
true && false => false - (Eu quero uma caneta azul mas não consegui a caneta vermelha "false")
false && true => false - (Eu não consegui a caneta azul e consegui a caneta vermelha "false")
false && false => false -  (Eu não consegui nem a caneta azul e nem a caneta vermelha "false")


|| (disjunção) "ou" lógico (Ex: Eu quero uma caneta azul ou uma caneta vermelha "||"  satisfaz se entregar as duas,ou então uma ou a outra, basta uma ser true)
true || true ==> true
true || false ==> true
false || true ==> true
false || false ==> false

Ordem de execução: expressão
1 º !
2 º &&
3º ||

Exemplos:
idade >= 15 && idade <= 17 // a idade está entre 15 e 17?
estado == 'RJ' || estado == 'SP' // o esatdo é RJ ou SP?
salário > 1500 && sexo !- 'M' //o salário é acima de 1500 e não é homem?
---------------------------------------------------------------------------------
ternário
? // Funciona como se fosse o if
: // Funciona como se fosse o senão

Se chama ternário porque tem 3 partes, 3 operadores
teste ? true : false
media >= 7.0 ? "Aprovado" : "Reprovado"

media > 7 ? 'Aprovado' : 'Reprovado'
'Reprovado'

> var idade = 19
undefined
> var r = idade >= 18 ? 'Maior' : 'Menor'
undefined
> r
'Maior'
>

---------------------------------------------------------------------------------

if (condição1)
   instrução1
else
   if (condição2)
      instrução2
   else
      if (condição3)
---

if (x > 5) {

} else if (x > 50) {

} else {

}
---
-----------------------------------------------------------------------------------
if (condição) {
   instrução1
} else {
   instrução2
}

var preco = 200.5
if (preco <= 0) { n = 80 } else {  x = 10 }
10
if (preco >= 0) { n = 80 } else {  x = 10 }
80
------------------------------------------------------------------------------------
DOM - Document Object Model

